enum ItemType {
  power
  gun
  mine
  drug
  hide
  bomb
  doublejump
  flypack
  grenade
}

enum ProtocolKind {
  tick
  initSuccess
  join
  joinSuccess
  control
  explode
  userDead
}

enum UserStatus {
  dieing
  climbing
  rolling2
  standing
  rolling
  mining
  crawling
  falling
}

type Item {
  x: Int!
  y: Int!
  type: ItemType!
  dead: Boolean!
}

type Mine {
  x: Int!
  y: Int!
  dead: Boolean!
}

type Grenade {
  x: Int!
  y: Int!
  r: Int!
}

type User {
  itemType: ItemType
  itemCount: Int!
  nearLadder: Ladder
  faceing: Int!
  fireing: Int
  grenadeing: Int!
  danger: Boolean!
  status: UserStatus!
  name: String!
  id: Int!
  x: Int!
  y: Int!
  vy: Int!
  score: Int!
  dead: Boolean!
  doubleJumping: Boolean!
  flying: Int!
}

type Door {
  x: Int!
  y: Int!
}

type ItemGate {
  x: Int!
  y: Float!
}

type Tick {
  users: [User]!
  items: [Item]!
  mines: [Mine]!
  grenades: [Grenade]!
}

type MapData {
  w: Int!
  h: Int!
  floors: [Int]!
  ladders: [Ladder]!
  doors: [Door]!
  itemGates: [ItemGate]!
}

type InitSuccess {
  map: MapData!
}

type Join {
  userName: String!
}

type JoinSuccess {
  userId: Int!
}

type Control {
  leftDown: Int!
  rightDown: Int!
  upDown: Int!
  downDown: Int!
  itemDown: Int!
  leftPress: Boolean!
  rightPress: Boolean!
  upPress: Boolean!
  downPress: Boolean!
  itemPress: Boolean!
}

type ControlProtocol {
  kind: ProtocolKind!
  control: Control!
}

type Explode {
  x: Int!
  y: Int!
  power: Int!
}

type UserDead {
  user: User!
  killer: User
}

type Protocol {
  kind: ProtocolKind!
  initSuccess: InitSuccess
  join: Join
  joinSuccess: JoinSuccess
  control: Control
  tick: Tick
  explode: Explode
  userDead: UserDead
}

type Ladder {
  x: Float!
  y1: Int!
  y2: Int!
}
