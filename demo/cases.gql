enum StringEnum {
  enumMember1
  enumMember2
}

enum NumberEnum {
  enumMember1
  enumMember2
}

enum NumberEnum2 {
  enumMember1
  enumMember2
}

type TypeLiteral {
  typeLiteralMember1: Float!
  typeLiteralMember2: String!
}

type Interface {
  interfaceMember1: Float
  interfaceMember2: String
}

type TypeUnion1 {
  typeLiteralMember1: Float
  typeLiteralMember2: String
  typeUnionMember1: Float
  typeUnionMember2: String
}

type TypeUnion2 {
  kind: StringEnum!
  typeUnionMember1: String
  typeUnionMember2: String
}

type TypeUnion3 {
  kind: NumberEnum!
  typeUnionMember1: String
  typeUnionMember2: String
}

type TypeUnion4 {
  kind: string!
  typeUnionMember1: String
  typeUnionMember2: String
}

type TypeUnion {
  typeUnionMember1: TypeUnion1!
  typeUnionMember2: TypeUnion2!
  typeUnionMember3: TypeUnion3!
  typeUnionMember4: TypeUnion4!
  typeUnionMember5: TypeUnion5!
  typeUnionMember7: string!
}

type InterfaceExtends {
  interfaceExtendsMember1: Float!
  interfaceExtendsMember2: String!
  interfaceMember1: Float
  interfaceMember2: String
}

type TypeIntersection1 {
  interfaceMember1: Float
  interfaceMember2: String
  typeIntersectionMember1: Float!
  typeIntersectionMember2: String!
}

type TypeIntersection2 {
  typeIntersectionMember1: Float!
  typeIntersectionMember2: String!
  typeIntersectionMember3: Float!
  typeIntersectionMember4: String!
}

type TypeIntersection {
  typeIntersectionMember1: TypeIntersection1!
  typeIntersectionMember2: TypeIntersection2!
}

type TypeUnionAndIntersection {
  typeIntersectionMember1: Float!
  kind: NumberEnum!
  typeUnionMember1: String
  typeUnionMember2: String
}

type TaggedField {
  taggedFieldMember1: Float!
  taggedFieldMember2: String!
}

type Enum {
  stringEnum: String!
  numberEnum: NumberEnum!
  numberEnum2: NumberEnum2!
}

type NumberType {
  numberMember: Float!
  integerMember: Int!
  uint32Member: Int!
  int32Member: Int!
  sint32Member: Int!
  fixed32Member: Int!
  sfixed32Member: Int!
  uint64Member: Int!
  int64Member: Int!
  sint64Member: Int!
  fixed64Member: Int!
  sfixed64Member: Int!
  floatMember: Float!
  doubleMember: Float!
}

type StringType {
  stringMember: String!
}

type ArrayType {
  arrayType1: [String]!
  arrayType2: [TypeLiteral]!
  arrayType4: [Int]!
}

type MapType7 {
  foo: String!
}

type MapType {
  mapType7: MapType7!
}

type Parameter {
  member1(name: String!, age: Float!): String!
  member2(name: String): String!
}

type DefaultValue {
  stringMember: String!
  numberMember: Float!
  booleanMember: Boolean!
}

type EntryType {
  optionalMember: String
  booleanMember: Boolean!
  stringMember: String!
  numberType: NumberType!
  arrayType: ArrayType!
  referenceType: TypeLiteral!
  interfaceType: Interface!
  typeUnion: TypeUnion!
  interfaceExtends: InterfaceExtends!
  typeIntersection: TypeIntersection!
  typeUnionAndIntersection: TypeUnionAndIntersection!
  mapType: MapType!
  taggedField: TaggedField!
  enum: Enum!
  stringNumber: StringType!
  id: ID!
  parameter: Parameter!
  optionalArrayMember: [String]
  tupleType: [String]!
  defaultType: DefaultValue!
}
