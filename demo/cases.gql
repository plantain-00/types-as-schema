scalar JSON

enum StringEnum {
  enumMember1
  enumMember2
}

enum NumberEnum {
  enumMember1
  enumMember2
}

enum NumberEnum2 {
  enumMember1
  enumMember2
}

type TypeLiteral {
  typeLiteralMember1: Float!
  typeLiteralMember2: String!
}

type Interface {
  interfaceMember1: Float
  interfaceMember2: String
}

type TypeUnion1 {
  typeLiteralMember1: Float
  typeLiteralMember2: String
  typeUnionMember1: Float
  typeUnionMember2: String
}

type TypeUnion2 {
  kind: StringEnum!
  typeUnionMember1: String
  typeUnionMember2: String
}

type TypeUnion3 {
  kind: NumberEnum!
  typeUnionMember1: String
  typeUnionMember2: String
}

type TypeUnion4 {
  kind: String!
  typeUnionMember1: String
  typeUnionMember2: String
}

union TypeUnion5 = TypeLiteral | Interface

enum TypeUnion9 {
  foo
  bar
}

type TypeUnion {
  typeUnionMember1: TypeUnion1!
  typeUnionMember2: TypeUnion2!
  typeUnionMember3: TypeUnion3!
  typeUnionMember4: TypeUnion4!
  typeUnionMember5: TypeUnion5!
  typeUnionMember6: JSON!
  typeUnionMember7: String!
  typeUnionMember8: JSON!
  typeUnionMember9: TypeUnion9!
}

type InterfaceExtends {
  interfaceExtendsMember1: Float!
  interfaceExtendsMember2: String!
  interfaceMember1: Float
  interfaceMember2: String
}

type TypeIntersection1 {
  interfaceMember1: Float
  interfaceMember2: String
  typeIntersectionMember1: Float!
  typeIntersectionMember2: String!
}

type TypeIntersection2 {
  typeIntersectionMember1: Float!
  typeIntersectionMember2: String!
  typeIntersectionMember3: Float!
  typeIntersectionMember4: String!
}

type TypeIntersection {
  typeIntersectionMember1: TypeIntersection1!
  typeIntersectionMember2: TypeIntersection2!
  typeIntersectionMember3: JSON!
}

type TypeUnionAndIntersection {
  typeIntersectionMember1: Float!
  kind: NumberEnum!
  typeUnionMember1: String
  typeUnionMember2: String
}

type TaggedField {
  taggedFieldMember1: Float!
  taggedFieldMember2: String!
}

type Enum {
  stringEnum: String!
  numberEnum: NumberEnum!
  numberEnum2: NumberEnum2!
  stringEnum2: String!
}

type NumberType {
  numberMember: Float!
  integerMember: Int!
  uint32Member: Int!
  int32Member: Int!
  sint32Member: Int!
  fixed32Member: Int!
  sfixed32Member: Int!
  uint64Member: Int!
  int64Member: Int!
  sint64Member: Int!
  fixed64Member: Int!
  sfixed64Member: Int!
  floatMember: Float!
  doubleMember: Float!
  titleMember: Float!
}

type StringType {
  stringMember: String!
}

type ArrayType {
  arrayType1: [String]!
  arrayType2: [TypeLiteral]!
  arrayType4: [Int]!
  arrayType9: [String]!
}

type MapType7 {
  foo: String!
}

type MapType {
  mapType: JSON!
  mapType2: JSON!
  mapType3: JSON!
  mapType4: JSON!
  mapType5: JSON!
  mapType7: MapType7!
  mapType8: JSON!
}

type Parameter {
  member1(name: String!, age: Float!): String!
  member2(name: String): String!
}

type DefaultValue {
  stringMember: String!
  numberMember: Float!
  booleanMember: Boolean!
  stringMember2: String!
  stringMember3: String!
  arrayMember: [JSON]!
  numberMember1: Int!
  objectMember2: TypeLiteral!
}

type ReferenceType {
  typeReferenceMember1: TypeLiteral!
  typeReferenceMember2: TypeReferenceMember2!
}

type ClassType1 {
  classMember1: String!
  classMember2: Float!
}

type ClassType2 {
  classMember3: String!
  classMember4: Float!
  classMember1: String!
  classMember2: Float!
}

type ClassType3 {
  classMember1: String!
  classMember2: Float!
  classMember3: Boolean!
  classMember4: String!
  classMember5: [String]!
}

type ClassType {
  classType1: ClassType1!
  classType2: ClassType2!
  classType3: ClassType3!
}

type Circular {
  children: [Circular]!
}

type EntryType {
  optionalMember: String
  booleanMember: Boolean!
  stringMember: String!
  numberType: NumberType!
  arrayType: ArrayType!
  referenceType: ReferenceType!
  interfaceType: Interface!
  typeUnion: TypeUnion!
  interfaceExtends: InterfaceExtends!
  typeIntersection: TypeIntersection!
  typeUnionAndIntersection: TypeUnionAndIntersection!
  mapType: MapType!
  taggedField: TaggedField!
  enum: Enum!
  stringNumber: StringType!
  id: ID!
  parameter: Parameter!
  optionalArrayMember: [String]
  tupleType: [String]!
  defaultType: DefaultValue!
  anyType: JSON!
  classType: ClassType!
  circular: Circular!
  outerType: OuterType!
  typeAlias: TypeAlias!
}

type Mutation {
  create(input: CreateInput!): MutationResult!
}

input CreateInput {
  member1: String!
  member2: Float!
  member3: CreateInputMember3!
}

type MutationResult {
  result: Boolean!
}

type Query {
  user(id: String!): GetResult!
  users: GetResult!
}

type GetResult {
  result: Result!
}

type Result {
  member1: String!
  member2(input: String!): String!
}

input CreateInputMember3 {
  member1: String!
}

type TypeAlias {
  result: Result2!
}

type Result3 {
  result3: String!
}

type Pet {
  id: Float
  name: String!
  photoUrls: [String]!
  status: String!
}

type MongooseScheme {
  objectId: ObjectId!
  date: Date!
}

type OuterType {
  outerType: Float!
}
