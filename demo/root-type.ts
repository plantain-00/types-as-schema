/**
 * This file is generated by 'types-as-schema'
 * It is not mean to be edited by hand
 */
// tslint:disable

import { GraphQLResolveInfo } from 'graphql'

import { StringEnum, NumberEnum, NumberEnum2, TypeUnion9 } from './cases'

export type DeepPromisifyReturnType<T> = {
  [P in keyof T]: T[P] extends Array<infer U>
    ? Array<DeepPromisifyReturnType<U>>
    : T[P] extends (...args: infer P) => infer R
      ? (...args: P) => R | Promise<R>
      : DeepPromisifyReturnType<T[P]>
}

export type DeepReturnType<T> = {
  [P in keyof T]: T[P] extends Array<infer U>
    ? Array<DeepReturnType<U>>
    : T[P] extends (...args: any[]) => infer R
      ? R
      : DeepReturnType<T[P]>
}

export interface Root<TContext = any> {
  create(input: { input: CreateInput<TContext> }, context: TContext, info: GraphQLResolveInfo): DeepPromisifyReturnType<MutationResult<TContext>> | Promise<DeepPromisifyReturnType<MutationResult<TContext>>>
  user(input: { id: string }, context: TContext, info: GraphQLResolveInfo): DeepPromisifyReturnType<GetResult<TContext>> | Promise<DeepPromisifyReturnType<GetResult<TContext>>>
  users(input: {}, context: TContext, info: GraphQLResolveInfo): DeepPromisifyReturnType<GetResult<TContext>> | Promise<DeepPromisifyReturnType<GetResult<TContext>>>
}

export interface TypeLiteral<TContext> {
  typeLiteralMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  typeLiteralMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface Interface<TContext> {
  interfaceMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  interfaceMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface TypeUnion1<TContext> {
  typeLiteralMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  typeLiteralMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  typeUnionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  typeUnionMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface TypeUnion2<TContext> {
  kind(input: {}, context: TContext, info: GraphQLResolveInfo): StringEnum | Promise<StringEnum>
  typeUnionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  typeUnionMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface TypeUnion3<TContext> {
  kind(input: {}, context: TContext, info: GraphQLResolveInfo): NumberEnum | Promise<NumberEnum>
  typeUnionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  typeUnionMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface TypeUnion4<TContext> {
  kind(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  typeUnionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  typeUnionMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export type TypeUnion5<TContext> = TypeLiteral<TContext> | Interface<TContext>

export type TypeUnion8<TContext> = string | string | null | boolean

export interface TypeUnion<TContext> {
  typeUnionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): TypeUnion1<TContext> | Promise<TypeUnion1<TContext>>
  typeUnionMember2(input: {}, context: TContext, info: GraphQLResolveInfo): TypeUnion2<TContext> | Promise<TypeUnion2<TContext>>
  typeUnionMember3(input: {}, context: TContext, info: GraphQLResolveInfo): TypeUnion3<TContext> | Promise<TypeUnion3<TContext>>
  typeUnionMember4(input: {}, context: TContext, info: GraphQLResolveInfo): TypeUnion4<TContext> | Promise<TypeUnion4<TContext>>
  typeUnionMember5(input: {}, context: TContext, info: GraphQLResolveInfo): TypeUnion5<TContext> | Promise<TypeUnion5<TContext>>
  typeUnionMember6(input: {}, context: TContext, info: GraphQLResolveInfo): string | null | boolean | Promise<string | null | boolean>
  typeUnionMember7(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  typeUnionMember8(input: {}, context: TContext, info: GraphQLResolveInfo): TypeUnion8<TContext> | Promise<TypeUnion8<TContext>>
  typeUnionMember9(input: {}, context: TContext, info: GraphQLResolveInfo): TypeUnion9 | Promise<TypeUnion9>
}

export interface InterfaceExtends<TContext> {
  interfaceExtendsMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  interfaceExtendsMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  interfaceMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  interfaceMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface TypeIntersection1<TContext> {
  interfaceMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  interfaceMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  typeIntersectionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  typeIntersectionMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface TypeIntersection2<TContext> {
  typeIntersectionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  typeIntersectionMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  typeIntersectionMember3(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  typeIntersectionMember4(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface TypeIntersection<TContext> {
  typeIntersectionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): TypeIntersection1<TContext> | Promise<TypeIntersection1<TContext>>
  typeIntersectionMember2(input: {}, context: TContext, info: GraphQLResolveInfo): TypeIntersection2<TContext> | Promise<TypeIntersection2<TContext>>
  typeIntersectionMember3(input: {}, context: TContext, info: GraphQLResolveInfo): any | Promise<any>
}

export interface TypeUnionAndIntersection<TContext> {
  typeIntersectionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  kind(input: {}, context: TContext, info: GraphQLResolveInfo): NumberEnum | Promise<NumberEnum>
  typeUnionMember1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  typeUnionMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface TaggedField<TContext> {
  taggedFieldMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  taggedFieldMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface Enum<TContext> {
  stringEnum(input: {}, context: TContext, info: GraphQLResolveInfo): StringEnum | Promise<StringEnum>
  numberEnum(input: {}, context: TContext, info: GraphQLResolveInfo): NumberEnum | Promise<NumberEnum>
  numberEnum2(input: {}, context: TContext, info: GraphQLResolveInfo): NumberEnum2 | Promise<NumberEnum2>
  stringEnum2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface NumberType<TContext> {
  numberMember(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  integerMember(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  uint32Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  int32Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  sint32Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  fixed32Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  sfixed32Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  uint64Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  int64Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  sint64Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  fixed64Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  sfixed64Member(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  floatMember(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  doubleMember(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  titleMember(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
}

export interface StringType<TContext> {
  stringMember(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface ArrayType<TContext> {
  arrayType1(input: {}, context: TContext, info: GraphQLResolveInfo): Array<string> | Promise<Array<string>>
  arrayType2(input: {}, context: TContext, info: GraphQLResolveInfo): Array<TypeLiteral<TContext>> | Promise<Array<TypeLiteral<TContext>>>
  arrayType3(input: {}, context: TContext, info: GraphQLResolveInfo): Array<object> | Promise<Array<object>>
  arrayType4(input: {}, context: TContext, info: GraphQLResolveInfo): Array<number> | Promise<Array<number>>
  arrayType5(input: {}, context: TContext, info: GraphQLResolveInfo): Array<object> | Promise<Array<object>>
  arrayType6(input: {}, context: TContext, info: GraphQLResolveInfo): Array<object> | Promise<Array<object>>
  arrayType7(input: {}, context: TContext, info: GraphQLResolveInfo): Array<object> | Promise<Array<object>>
  arrayType8(input: {}, context: TContext, info: GraphQLResolveInfo): Array<object> | Promise<Array<object>>
}

export interface MapType7<TContext> {
  foo(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface MapType8<TContext> {

}

export interface MapType<TContext> {
  mapType(input: {}, context: TContext, info: GraphQLResolveInfo): { [name: string]: number } | Promise<{ [name: string]: number }>
  mapType2(input: {}, context: TContext, info: GraphQLResolveInfo): { [name: string]: TypeLiteral<TContext> } | Promise<{ [name: string]: TypeLiteral<TContext> }>
  mapType3(input: {}, context: TContext, info: GraphQLResolveInfo): { [name: string]: object } | Promise<{ [name: string]: object }>
  mapType4(input: {}, context: TContext, info: GraphQLResolveInfo): { [name: string]: number } | Promise<{ [name: string]: number }>
  mapType5(input: {}, context: TContext, info: GraphQLResolveInfo): { [name: string]: any } | Promise<{ [name: string]: any }>
  mapType6(input: {}, context: TContext, info: GraphQLResolveInfo): object | Promise<object>
  mapType7(input: {}, context: TContext, info: GraphQLResolveInfo): MapType7<TContext> | Promise<MapType7<TContext>>
  mapType8(input: {}, context: TContext, info: GraphQLResolveInfo): MapType8<TContext> | Promise<MapType8<TContext>>
}

export interface Parameter<TContext> {
  member1(input: { name: string, age: number }, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  member2(input: { name?: string }, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface DefaultValue<TContext> {
  stringMember(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  numberMember(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  booleanMember(input: {}, context: TContext, info: GraphQLResolveInfo): boolean | Promise<boolean>
  stringMember2(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  stringMember3(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  arrayMember(input: {}, context: TContext, info: GraphQLResolveInfo): Array<any> | Promise<Array<any>>
  objectMember(input: {}, context: TContext, info: GraphQLResolveInfo): object | Promise<object>
  numberMember1(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  objectMember2(input: {}, context: TContext, info: GraphQLResolveInfo): TypeLiteral<TContext> | Promise<TypeLiteral<TContext>>
}

export type TypeReferenceMember2<TContext> = TypeLiteral<TContext>

export interface ReferenceType<TContext> {
  typeReferenceMember1(input: {}, context: TContext, info: GraphQLResolveInfo): TypeLiteral<TContext> | Promise<TypeLiteral<TContext>>
  typeReferenceMember2(input: {}, context: TContext, info: GraphQLResolveInfo): TypeReferenceMember2<TContext> | Promise<TypeReferenceMember2<TContext>>
}

export interface ClassType1<TContext> {
  classMember1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  classMember2(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
}

export interface ClassType2<TContext> {
  classMember3(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  classMember4(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  classMember1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  classMember2(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
}

export interface ClassType3<TContext> {
  classMember1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  classMember2(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  classMember3(input: {}, context: TContext, info: GraphQLResolveInfo): boolean | Promise<boolean>
  classMember4(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  classMember5(input: {}, context: TContext, info: GraphQLResolveInfo): Array<string> | Promise<Array<string>>
  classMember6(input: {}, context: TContext, info: GraphQLResolveInfo): object | Promise<object>
}

export interface ClassType<TContext> {
  classType1(input: {}, context: TContext, info: GraphQLResolveInfo): ClassType1<TContext> | Promise<ClassType1<TContext>>
  classType2(input: {}, context: TContext, info: GraphQLResolveInfo): ClassType2<TContext> | Promise<ClassType2<TContext>>
  classType3(input: {}, context: TContext, info: GraphQLResolveInfo): ClassType3<TContext> | Promise<ClassType3<TContext>>
}

export interface Circular<TContext> {
  children(input: {}, context: TContext, info: GraphQLResolveInfo): Array<Circular<TContext>> | Promise<Array<Circular<TContext>>>
}

export interface EntryType<TContext> {
  optionalMember(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  booleanMember(input: {}, context: TContext, info: GraphQLResolveInfo): boolean | Promise<boolean>
  stringMember(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  numberType(input: {}, context: TContext, info: GraphQLResolveInfo): NumberType<TContext> | Promise<NumberType<TContext>>
  arrayType(input: {}, context: TContext, info: GraphQLResolveInfo): ArrayType<TContext> | Promise<ArrayType<TContext>>
  typeLiteral(input: {}, context: TContext, info: GraphQLResolveInfo): object | Promise<object>
  referenceType(input: {}, context: TContext, info: GraphQLResolveInfo): ReferenceType<TContext> | Promise<ReferenceType<TContext>>
  interfaceType(input: {}, context: TContext, info: GraphQLResolveInfo): Interface<TContext> | Promise<Interface<TContext>>
  typeUnion(input: {}, context: TContext, info: GraphQLResolveInfo): TypeUnion<TContext> | Promise<TypeUnion<TContext>>
  interfaceExtends(input: {}, context: TContext, info: GraphQLResolveInfo): InterfaceExtends<TContext> | Promise<InterfaceExtends<TContext>>
  typeIntersection(input: {}, context: TContext, info: GraphQLResolveInfo): TypeIntersection<TContext> | Promise<TypeIntersection<TContext>>
  typeUnionAndIntersection(input: {}, context: TContext, info: GraphQLResolveInfo): TypeUnionAndIntersection<TContext> | Promise<TypeUnionAndIntersection<TContext>>
  mapType(input: {}, context: TContext, info: GraphQLResolveInfo): MapType<TContext> | Promise<MapType<TContext>>
  taggedField(input: {}, context: TContext, info: GraphQLResolveInfo): TaggedField<TContext> | Promise<TaggedField<TContext>>
  enum(input: {}, context: TContext, info: GraphQLResolveInfo): Enum<TContext> | Promise<Enum<TContext>>
  stringNumber(input: {}, context: TContext, info: GraphQLResolveInfo): StringType<TContext> | Promise<StringType<TContext>>
  id(input: {}, context: TContext, info: GraphQLResolveInfo): ID<TContext> | Promise<ID<TContext>>
  parameter(input: {}, context: TContext, info: GraphQLResolveInfo): Parameter<TContext> | Promise<Parameter<TContext>>
  optionalArrayMember(input: {}, context: TContext, info: GraphQLResolveInfo): Array<string> | Promise<Array<string>>
  tupleType(input: {}, context: TContext, info: GraphQLResolveInfo): Array<string> | Promise<Array<string>>
  defaultType(input: {}, context: TContext, info: GraphQLResolveInfo): DefaultValue<TContext> | Promise<DefaultValue<TContext>>
  anyType(input: {}, context: TContext, info: GraphQLResolveInfo): any | Promise<any>
  classType(input: {}, context: TContext, info: GraphQLResolveInfo): ClassType<TContext> | Promise<ClassType<TContext>>
  circular(input: {}, context: TContext, info: GraphQLResolveInfo): Circular<TContext> | Promise<Circular<TContext>>
  outerType(input: {}, context: TContext, info: GraphQLResolveInfo): OuterType<TContext> | Promise<OuterType<TContext>>
  typeAlias(input: {}, context: TContext, info: GraphQLResolveInfo): TypeAlias<TContext> | Promise<TypeAlias<TContext>>
}

export interface CreateInput<TContext> {
  member1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  member2(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
  member3(input: {}, context: TContext, info: GraphQLResolveInfo): CreateInputMember3<TContext> | Promise<CreateInputMember3<TContext>>
}

export interface MutationResult<TContext> {
  result(input: {}, context: TContext, info: GraphQLResolveInfo): boolean | Promise<boolean>
}

export interface GetResult<TContext> {
  result(input: {}, context: TContext, info: GraphQLResolveInfo): Result<TContext> | Promise<Result<TContext>>
}

export interface Result<TContext> {
  member1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
  member2(input: { input: string }, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface CreateInputMember3<TContext> {
  member1(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface TypeAlias<TContext> {
  result(input: {}, context: TContext, info: GraphQLResolveInfo): Result2<TContext> | Promise<Result2<TContext>>
}

export type Result2<TContext> = Result3<TContext>

export interface Result3<TContext> {
  result3(input: {}, context: TContext, info: GraphQLResolveInfo): string | Promise<string>
}

export interface OuterType<TContext> {
  outerType(input: {}, context: TContext, info: GraphQLResolveInfo): number | Promise<number>
}

export interface ApolloResolvers<TContext = any> {
  TypeLiteral?: {
    typeLiteralMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeLiteralMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Interface?: {
    interfaceMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion1?: {
    typeLiteralMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeLiteralMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion2?: {
    kind?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion3?: {
    kind?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion4?: {
    kind?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion?: {
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember5?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember6?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember7?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember8?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember9?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  InterfaceExtends?: {
    interfaceExtendsMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceExtendsMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeIntersection1?: {
    interfaceMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeIntersection2?: {
    typeIntersectionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeIntersection?: {
    typeIntersectionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnionAndIntersection?: {
    typeIntersectionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    kind?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TaggedField?: {
    taggedFieldMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    taggedFieldMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Enum?: {
    stringEnum?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberEnum?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberEnum2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringEnum2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  NumberType?: {
    numberMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    integerMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    uint32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    int32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    sint32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    fixed32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    sfixed32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    uint64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    int64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    sint64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    fixed64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    sfixed64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    floatMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    doubleMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    titleMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  StringType?: {
    stringMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ArrayType?: {
    arrayType1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType5?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType6?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType7?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType8?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  MapType7?: {
    foo?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  MapType8?: {

  },
  MapType?: {
    mapType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType5?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType6?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType7?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType8?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Parameter?: {
    member1?(parent: any, input: { name: string, age: number }, context: TContext, info: GraphQLResolveInfo): any,
    member2?(parent: any, input: { name?: string }, context: TContext, info: GraphQLResolveInfo): any,
  },
  DefaultValue?: {
    stringMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    booleanMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    objectMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    objectMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ReferenceType?: {
    typeReferenceMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeReferenceMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ClassType1?: {
    classMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ClassType2?: {
    classMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ClassType3?: {
    classMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember5?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember6?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ClassType?: {
    classType1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classType2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classType3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Circular?: {
    children?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  EntryType?: {
    optionalMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    booleanMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeLiteral?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    referenceType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnion?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceExtends?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersection?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionAndIntersection?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    taggedField?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    enum?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringNumber?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    id?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    parameter?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    optionalArrayMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    tupleType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    defaultType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    anyType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    circular?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    outerType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeAlias?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Mutation: {
    create(parent: any, input: { input: CreateInput<TContext> }, context: TContext, info: GraphQLResolveInfo): any,
  },
  CreateInput?: {
    member1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    member2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    member3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  MutationResult?: {
    result?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Query: {
    user(parent: any, input: { id: string }, context: TContext, info: GraphQLResolveInfo): any,
    users(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  GetResult?: {
    result?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Result?: {
    member1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    member2?(parent: any, input: { input: string }, context: TContext, info: GraphQLResolveInfo): any,
  },
  CreateInputMember3?: {
    member1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeAlias?: {
    result?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Result3?: {
    result3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  OuterType?: {
    outerType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
}

export interface ResolveResult<TContext = any> {
  create: DeepReturnType<MutationResult<TContext>>
  user: DeepReturnType<GetResult<TContext>>
  users: DeepReturnType<GetResult<TContext>>
}

// tslint:enable
