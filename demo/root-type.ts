/**
 * This file is generated by 'types-as-schema'
 * It is not mean to be edited by hand
 */
// tslint:disable

import { GraphQLResolveInfo } from 'graphql'

import { MutationResult, CreateInput, GetResult } from './cases'

export type DeepPromisifyReturnType<T> = {
  [P in keyof T]: T[P] extends Array<infer U>
    ? Array<DeepPromisifyReturnType<U>>
    : T[P] extends (...args: infer P) => infer R
      ? (...args: P) => R | Promise<R>
      : DeepPromisifyReturnType<T[P]>
}

export interface Root<TContext = any> {
  create(input: { input: CreateInput }, context: TContext, info: GraphQLResolveInfo): DeepPromisifyReturnType<MutationResult> | Promise<DeepPromisifyReturnType<MutationResult>>
  user(input: { id: string }, context: TContext, info: GraphQLResolveInfo): DeepPromisifyReturnType<GetResult> | Promise<DeepPromisifyReturnType<GetResult>>
  users(input: {}, context: TContext, info: GraphQLResolveInfo): DeepPromisifyReturnType<GetResult> | Promise<DeepPromisifyReturnType<GetResult>>
}

export interface ApolloResolvers<TContext> {
  TypeLiteral?: {
    typeLiteralMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeLiteralMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Interface?: {
    interfaceMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion1?: {
    typeLiteralMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeLiteralMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion2?: {
    kind?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion3?: {
    kind?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion4?: {
    kind?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnion?: {
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember5?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember6?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember7?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember8?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember9?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  InterfaceExtends?: {
    interfaceExtendsMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceExtendsMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeIntersection1?: {
    interfaceMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeIntersection2?: {
    typeIntersectionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeIntersection?: {
    typeIntersectionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersectionMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeUnionAndIntersection?: {
    typeIntersectionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    kind?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TaggedField?: {
    taggedFieldMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    taggedFieldMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Enum?: {
    stringEnum?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberEnum?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberEnum2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringEnum2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  NumberType?: {
    numberMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    integerMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    uint32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    int32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    sint32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    fixed32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    sfixed32Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    uint64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    int64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    sint64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    fixed64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    sfixed64Member?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    floatMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    doubleMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    titleMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  StringType?: {
    stringMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ArrayType?: {
    arrayType1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType5?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType6?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType7?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType8?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  MapType7?: {
    foo?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  MapType8?: {

  },
  MapType?: {
    mapType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType5?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType6?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType7?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType8?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Parameter?: {
    member1?(parent: any, input: { name: string, age: number }, context: TContext, info: GraphQLResolveInfo): any,
    member2?(parent: any, input: { name?: string }, context: TContext, info: GraphQLResolveInfo): any,
  },
  DefaultValue?: {
    stringMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    booleanMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    objectMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    objectMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ReferenceType?: {
    typeReferenceMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeReferenceMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ClassType1?: {
    classMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ClassType2?: {
    classMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ClassType3?: {
    classMember1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember4?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember5?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classMember6?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  ClassType?: {
    classType1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classType2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classType3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Circular?: {
    children?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  EntryType?: {
    optionalMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    booleanMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    numberType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    arrayType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeLiteral?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    referenceType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnion?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    interfaceExtends?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeIntersection?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeUnionAndIntersection?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    mapType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    taggedField?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    enum?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    stringNumber?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    id?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    parameter?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    optionalArrayMember?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    tupleType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    defaultType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    anyType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    classType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    circular?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    outerType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    typeAlias?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Mutation: {
    create(parent: any, input: { input: CreateInput }, context: TContext, info: GraphQLResolveInfo): any,
  },
  CreateInput?: {
    member1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    member2?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    member3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  MutationResult?: {
    result?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Query: {
    user(parent: any, input: { id: string }, context: TContext, info: GraphQLResolveInfo): any,
    users(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  GetResult?: {
    result?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Result?: {
    member1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
    member2?(parent: any, input: { input: string }, context: TContext, info: GraphQLResolveInfo): any,
  },
  CreateInputMember3?: {
    member1?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  TypeAlias?: {
    result?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  Result3?: {
    result3?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
  OuterType?: {
    outerType?(parent: any, input: {}, context: TContext, info: GraphQLResolveInfo): any,
  },
}

export type DeepReturnType<T> = {
  [P in keyof T]: T[P] extends Array<infer U>
    ? Array<DeepReturnType<U>>
    : T[P] extends (...args: any[]) => infer R
      ? R
      : DeepReturnType<T[P]>
}

export interface ResolveResult {
  create: DeepReturnType<MutationResult>
  user: DeepReturnType<GetResult>
  users: DeepReturnType<GetResult>
}

// tslint:enable
