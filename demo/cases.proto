/**
 * This file is generated by 'types-as-schema'
 * It is not mean to be edited by hand
 */
syntax = "proto3";

enum NumberEnum {
    enumMember1 = 0;
    enumMember2 = 1;
}

enum NumberEnum2 {
    enumMember1 = 3;
    enumMember2 = 4;
}

message TypeLiteral {
    double typeLiteralMember1 = 1;
    string typeLiteralMember2 = 2;
}

message Interface {
    double interfaceMember1 = 1;
    string interfaceMember2 = 2;
}

message TypeUnion1 {
    double typeLiteralMember1 = 1;
    string typeLiteralMember2 = 2;
    double typeUnionMember1 = 3;
    string typeUnionMember2 = 4;
}

message TypeUnion2 {
    string kind = 1;
    string typeUnionMember1 = 2;
    string typeUnionMember2 = 3;
}

message TypeUnion3 {
    NumberEnum kind = 1;
    string typeUnionMember1 = 2;
    string typeUnionMember2 = 3;
}

message TypeUnion4 {
    string kind = 1;
    string typeUnionMember1 = 2;
    string typeUnionMember2 = 3;
}

message TypeUnion {
    TypeUnion1 typeUnionMember1 = 1;
    TypeUnion2 typeUnionMember2 = 2;
    TypeUnion3 typeUnionMember3 = 3;
    TypeUnion4 typeUnionMember4 = 4;
    TypeUnion5 typeUnionMember5 = 5;
    string typeUnionMember7 = 7;
    TypeUnion8 typeUnionMember8 = 8;
    TypeUnion9 typeUnionMember9 = 9;
}

message InterfaceExtends {
    double interfaceExtendsMember1 = 1;
    string interfaceExtendsMember2 = 2;
    double interfaceMember1 = 3;
    string interfaceMember2 = 4;
}

message TypeIntersection1 {
    double interfaceMember1 = 1;
    string interfaceMember2 = 2;
    double typeIntersectionMember1 = 3;
    string typeIntersectionMember2 = 4;
}

message TypeIntersection2 {
    double typeIntersectionMember1 = 1;
    string typeIntersectionMember2 = 2;
    double typeIntersectionMember3 = 3;
    string typeIntersectionMember4 = 4;
}

message TypeIntersection {
    TypeIntersection1 typeIntersectionMember1 = 1;
    TypeIntersection2 typeIntersectionMember2 = 2;
}

message TypeUnionAndIntersection {
    double typeIntersectionMember1 = 1;
    NumberEnum kind = 2;
    string typeUnionMember1 = 3;
    string typeUnionMember2 = 4;
}

message TaggedField {
    double taggedFieldMember1 = 2;
    string taggedFieldMember2 = 3;
}

message Enum {
    string stringEnum = 1;
    NumberEnum numberEnum = 2;
    NumberEnum2 numberEnum2 = 3;
    string stringEnum2 = 4;
}

message NumberType {
    double numberMember = 1;
    int32 integerMember = 2;
    uint32 uint32Member = 3;
    int32 int32Member = 4;
    sint32 sint32Member = 5;
    fixed32 fixed32Member = 6;
    sfixed32 sfixed32Member = 7;
    uint64 uint64Member = 8;
    int64 int64Member = 9;
    sint64 sint64Member = 10;
    fixed64 fixed64Member = 11;
    sfixed64 sfixed64Member = 12;
    float floatMember = 13;
    double doubleMember = 14;
    double titleMember = 15;
}

message StringType {
    string stringMember = 1;
}

message ArrayType {
    repeated string arrayType1 = 1;
    repeated TypeLiteral arrayType2 = 2;
    repeated uint32 arrayType4 = 4;
}

message MapType7 {
    string foo = 1;
}

message MapType {
    map<string, double> mapType = 1;
    map<string, TypeLiteral> mapType2 = 2;
    map<string, uint32> mapType4 = 4;
    MapType7 mapType7 = 7;
}

message Parameter {
    string member1 = 1;
    string member2 = 2;
}

message DefaultValue {
    string stringMember = 1;
    double numberMember = 2;
    bool booleanMember = 3;
    string stringMember2 = 4;
    string stringMember3 = 5;
    int32 numberMember1 = 8;
    TypeLiteral objectMember2 = 9;
}

message ReferenceType {
    TypeLiteral typeReferenceMember1 = 1;
    TypeReferenceMember2 typeReferenceMember2 = 2;
}

message ClassType1 {
    string classMember1 = 1;
    double classMember2 = 2;
}

message ClassType2 {
    string classMember3 = 1;
    double classMember4 = 2;
    string classMember1 = 3;
    double classMember2 = 4;
}

message ClassType3 {
    string classMember1 = 1;
    double classMember2 = 2;
    bool classMember3 = 3;
    string classMember4 = 4;
    repeated string classMember5 = 5;
}

message ClassType {
    ClassType1 classType1 = 1;
    ClassType2 classType2 = 2;
    ClassType3 classType3 = 3;
}

message Circular {
    repeated Circular children = 1;
}

message EntryType {
    string optionalMember = 1;
    bool booleanMember = 2;
    string stringMember = 3;
    NumberType numberType = 4;
    ArrayType arrayType = 5;
    ReferenceType referenceType = 7;
    Interface interfaceType = 8;
    TypeUnion typeUnion = 9;
    InterfaceExtends interfaceExtends = 10;
    TypeIntersection typeIntersection = 11;
    TypeUnionAndIntersection typeUnionAndIntersection = 12;
    MapType mapType = 13;
    TaggedField taggedField = 14;
    Enum enum = 15;
    StringType stringNumber = 16;
    ID id = 17;
    Parameter parameter = 18;
    repeated string optionalArrayMember = 19;
    repeated string tupleType = 20;
    DefaultValue defaultType = 21;
    ClassType classType = 23;
    Circular circular = 24;
    OuterType outerType = 25;
}

message OuterType {
    double outerType = 1;
}
