syntax = "proto3";

message TypeLiteral {
    double typeLiteralMember1 = 1;
    string typeLiteralMember2 = 2;
}

message Interface {
    double interfaceMember1 = 1;
    string interfaceMember2 = 2;
}

message TypeUnion1 {
    double typeUnionMember1 = 1;
    string typeUnionMember2 = 2;
}

message TypeUnion2 {
    string kind = 1;
    string typeUnionMember1 = 2;
    string typeUnionMember2 = 3;
}

message TypeUnion3 {
     kind = 1;
    string typeUnionMember1 = 2;
    string typeUnionMember2 = 3;
}

message TypeUnion {
    TypeUnion1 typeUnionMember1 = 1;
    TypeUnion2 typeUnionMember2 = 2;
    TypeUnion3 typeUnionMember3 = 3;
}

message InterfaceExtends {
    double interfaceExtendsMember1 = 1;
    string interfaceExtendsMember2 = 2;
    double interfaceMember1 = 3;
    string interfaceMember2 = 4;
}

message TypeIntersection1 {
    double typeIntersectionMember1 = 1;
    string typeIntersectionMember2 = 2;
}

message TypeIntersection2 {
    double typeIntersectionMember1 = 1;
    string typeIntersectionMember2 = 2;
    double typeIntersectionMember3 = 3;
    string typeIntersectionMember4 = 4;
}

message TypeIntersection {
    TypeIntersection1 typeIntersectionMember1 = 1;
    TypeIntersection2 typeIntersectionMember2 = 2;
}

message TypeUnionAndIntersection {
    double typeIntersectionMember1 = 1;
     kind = 2;
    string typeUnionMember1 = 3;
    string typeUnionMember2 = 4;
}

message TaggedField {
    double taggedFieldMember1 = 2;
    string taggedFieldMember2 = 3;
}

message NumberType {
    double numberMember = 1;
    int32 integerMember = 2;
    uint32 uint32Member = 3;
    int32 int32Member = 4;
    sint32 sint32Member = 5;
    fixed32 fixed32Member = 6;
    sfixed32 sfixed32Member = 7;
    uint64 uint64Member = 8;
    int64 int64Member = 9;
    sint64 sint64Member = 10;
    fixed64 fixed64Member = 11;
    sfixed64 sfixed64Member = 12;
    float floatMember = 13;
    double doubleMember = 14;
}

message ArrayType {
    repeated string arrayType1 = 1;
    repeated TypeLiteral arrayType2 = 2;
    repeated  arrayType3 = 3;
}

message MapType {
    map<string, uint32> mapType = 1;
    map<string, [object Object]> mapType2 = 2;
    map<string, [object Object]> mapType3 = 3;
    map<string, uint32> mapType4 = 4;
}

message EntryType {
    string optionalMember = 1;
    bool booleanMember = 2;
    string stringMember = 3;
    NumberType numberType = 4;
    ArrayType arrayType = 5;
     typeLiteral = 6;
    TypeLiteral referenceType = 7;
    Interface interfaceType = 8;
    TypeUnion typeUnion = 9;
    InterfaceExtends interfaceExtends = 10;
    TypeIntersection typeIntersection = 11;
    TypeUnionAndIntersection typeUnionAndIntersection = 12;
    MapType mapType = 13;
    TaggedField taggedField = 14;
    StringEnum stringEnum = 15;
    Enum enum = 16;
}
